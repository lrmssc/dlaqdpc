////  MagicGame.cpp//  dianliwangguomanyouji////  Created by szsycx on 3/18/15.////#include "MagicGame.h"#include "LevelScene.h"Scene * MagicGame::createScene(){    Scene * scene = Scene::create();    Layer * layer = MagicGame::create();    scene->addChild(layer);    return scene;}bool MagicGame::init(){    if(!Layer::init()){        return false;    }    CocosDenshion::SimpleAudioEngine::getInstance()->stopBackgroundMusic();    visibleSize= Director::getInstance()->getVisibleSize();    positions.push_back(Vec2(visibleSize.width*3.65/10.0,visibleSize.height*7.2/10.0));    positions.push_back(Vec2(visibleSize.width*6.35/10.0,visibleSize.height*7.2/10.0));    positions.push_back(Vec2(visibleSize.width*3.65/10.0,visibleSize.height*3.5/10.0));    positions.push_back(Vec2(visibleSize.width*6.35/10.0,visibleSize.height*3.5/10.0));       CocosDenshion::SimpleAudioEngine::getInstance()->preloadBackgroundMusic("magic.mp3");        currentSeason = UserDefault::getInstance()->getIntegerForKey("current_season", 1);    auto bg = Sprite::create(StringUtils::format("game/qbg%d.jpg",currentSeason));    bg->setPosition(Vec2(visibleSize.width/2.0,visibleSize.height/2.0));    addChild(bg);        maxLevel = UserDefault::getInstance()->getIntegerForKey(StringUtils::format("max_level%d",currentSeason).c_str(), 1);        auto dbg = Sprite::create("game/dbg.png");    dbg->setPosition(Vec2(visibleSize.width/2.0,visibleSize.height/2.0));    addChild(dbg);    int j = random(1, 4);    int cc= 0;    for (int i =0 ; i<5; i++) {        if(i==j){            continue;        }        auto sprite = Sprite::create(StringUtils::format("game/box%d.png",(i+1)).c_str());        sprite->setPosition(positions[cc]);        sprite->setTag(0);        items.push_back(sprite);        auto sprite2 = Sprite::create("game/box6.png");        sprite2->setVisible(false);        sprite2->setTag(i+1);        sprite2->setPosition(positions[cc++]);        box.push_back(sprite2);        addChild(sprite2);        addChild(sprite);    }    swapNumber =0 ;            textBg = Sprite::create("bgtiao.png");    textBg->setPosition(Vec2(visibleSize.width/2.0,visibleSize.height*7.5/10.0));    textBg->setVisible(false);    addChild(textBg);    name  =UserDefault::getInstance()->getStringForKey("name", "王小明");    text = Text::create(StringUtils::format("恭喜%s获得奖励",name.c_str()), "", 52);    text->setPosition(Vec2(visibleSize.width/2.0,visibleSize.height*7.5/10.0));    text->setColor(Color3B(93,44,24));    text->setVisible(false);    addChild(text);    scheduleUpdate();            auto listener = EventListenerTouchOneByOne::create();    listener->onTouchBegan= [&](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){            return true;        }        return false;    };    listener->onTouchMoved= [](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                    }            };    listener->onTouchEnded= [&](Touch* touch,Event * event){        if(over && i>200){        Director::getInstance()->replaceScene(LevelScene::createScene());        }    };    i = 0;       _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),this);        bool isMusicPlay = UserDefault::getInstance()->getBoolForKey("music", true);    if(isMusicPlay){    CocosDenshion::SimpleAudioEngine::getInstance()->playBackgroundMusic("magic.mp3", true);    }    return true;}void MagicGame::update(float dt){    if(swapNumber<SWAP_NUMBER&&Director::getInstance()->getActionManager()->getNumberOfRunningActionsInTarget(box[0])==0){        if(swapNumber==1){            for(Sprite * i :items){                i->setVisible(false);            }            for(Sprite * i:box){                i->setVisible(true);            }        }        swapNumber++;                swap();    }else{        auto listener = EventListenerTouchOneByOne::create();        listener->onTouchBegan= [&](Touch* touch,Event * event){            if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                return true;            }            return false;        };        listener->onTouchMoved= [](Touch* touch,Event * event){            if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                            }                    };        listener->onTouchEnded= [&](Touch* touch,Event * event){            if( event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){                if(!over){                int tag = event->getCurrentTarget()->getTag();                if(tag>0 && !textBg->isVisible() && !text->isVisible()){                    switch(tag){                        case 1:  text->setText(StringUtils::format("恭喜%s获得电之剑",name.c_str()));break;                        case 2:  text->setText(StringUtils::format("恭喜%s获得电之光",name.c_str()));break;                        case 3:  text->setText(StringUtils::format("恭喜%s获得电之翼",name.c_str()));break;                        case 4:  text->setText(StringUtils::format("恭喜%s获得还魂丹",name.c_str()));                                                        break;                        case 5:  text->setText(StringUtils::format("恭喜%s获得电豆",name.c_str()));                    }                                      items[tag-1]->setPosition(event->getCurrentTarget()->getPosition());                    items[tag-1]->setVisible(true);                    auto move = MoveTo::create(0.5, Vec2(visibleSize.width/2.0,visibleSize.height/2.0));//                    items[tag-1]->runAction(move);                    box[tag-1]->setVisible(false);                    over = true;                    int n = UserDefault::getInstance()->getIntegerForKey(StringUtils::format("item%d",tag).c_str())+1;                    UserDefault::getInstance()->setIntegerForKey(StringUtils::format("item%d",tag).c_str(),n);                    UserDefault::getInstance()->setBoolForKey(StringUtils::format("magic%d%d",currentSeason,maxLevel).c_str(),true);                    if(maxLevel==6||maxLevel==11){                        maxLevel++;                        UserDefault::getInstance()->setIntegerForKey(StringUtils::format("max_level%d",currentSeason).c_str(),maxLevel);                    }                    UserDefault::getInstance()->flush();                    textBg->setVisible(true);                    text->setVisible(true);                    items[tag-1]->runAction( Sequence::create(move,CallFunc::create([&]()                                                                                                                                   {                                                                                                                                                                                                                                                                               while(i<500){                                                                                                                                           i++;                                                                                                                  }                                                                                                                                                                                                                                                                          }),NULL));                }                }else{                                     }            }        };        for(int i = 0 ; i < 4 ; i ++){            _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),box[i]);            _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(),items[i]);        }    }}void MagicGame::swapTwoBoxPosition(Sprite* sprite1,Sprite*sprite2,Sprite* sprite3,Sprite*sprite4){    Vec2 position1 = sprite1->getPosition();    Vec2 position2 = sprite2->getPosition();    sprite1->runAction(MoveTo::create(0.5, position2));    sprite2->runAction(MoveTo::create(0.5, position1));    Vec2 position3 = sprite3->getPosition();    Vec2 position4 = sprite4->getPosition();    sprite3->runAction(MoveTo::create(0.5, position4));    sprite4->runAction(MoveTo::create(0.5, position3));}void MagicGame::swap(){    int first = random(0, 12)%box.size();    int second = (first+1)%box.size();    int third = (second+1)%box.size();    int forth = (third+1)%box.size();    swapTwoBoxPosition(box[first],box[second],box[third],box[forth]);}