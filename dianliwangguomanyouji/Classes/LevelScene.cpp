////  LevelScene.cpp//  dianliwangguomanyouji////  Created by szsycx on 3/16/15.////#include "LevelScene.h"#include "CastleScene.h"#include "GameScene.h"#include "ShopScene.h"#include "MagicGame.h"Scene * LevelScene::createScene(){    Scene * scene = Scene::create();    Layer * layer  = LevelScene::create();    scene->addChild(layer);    return scene;}bool LevelScene::init(){    if(!Layer::init()){        return false;    }    CocosDenshion::SimpleAudioEngine::getInstance()->preloadBackgroundMusic("xuqu.mp3");    bool isPlayMusic = UserDefault::getInstance()->getBoolForKey("music",true);    if(isPlayMusic){        CocosDenshion::SimpleAudioEngine::getInstance()->playBackgroundMusic("xuqu.mp3", true);    }    currentSeason = UserDefault::getInstance()->getIntegerForKey("current_season", 1);        int maxLevel = UserDefault::getInstance()->getIntegerForKey(StringUtils::format("max_level%d",currentSeason).c_str(), 1);        int bean = UserDefault::getInstance()->getIntegerForKey("bean");    int item1 = UserDefault::getInstance()->getIntegerForKey("item1");    int item2 =UserDefault::getInstance()->getIntegerForKey("item2");    int item3 = UserDefault::getInstance()->getIntegerForKey("item3");    int item4 =UserDefault::getInstance()->getIntegerForKey("item4");    if(item1<0){        item1=0;}    if(item2<0){        item2 = 0;    } if(item3<0){        item3=0;}    if(item4<0){        item4 = 0;    }    if(bean<0){    bean=0;}            Size visibleSize = Director::getInstance()->getVisibleSize();        auto bg = Sprite::create(StringUtils::format("level/bg%d.jpg",currentSeason).c_str());    bg->setPosition(Vec2(visibleSize.width/2.0, visibleSize.height/2.0));    addChild(bg);                 auto listener = EventListenerTouchOneByOne::create();    listener->setSwallowTouches(true);    listener->onTouchBegan=[](Touch* touch,Event * event){        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){            log("touch began");            return true;        }        log("touch began false");        return false;    };    listener->onTouchMoved=[](Touch*touch,Event*event){        log("touch onTouchMoved");            };    listener->onTouchEnded=[=](Touch*touch,Event*event){        log("touch onTouchEnded");        if(event->getCurrentTarget()->getBoundingBox().containsPoint(touch->getLocation())){            Sprite* sprite = static_cast<Sprite*>(event->getCurrentTarget())    ;            int tag = sprite->getTag();            log("level %d",tag);            if(tag==SHOP_TAG){                Director::getInstance()->replaceScene(ShopScene::createScene());            }else if(tag==BACK_TAG){                Director::getInstance()->replaceScene(CastleScene::createScene());            }else {                if(tag<=maxLevel){                    UserDefault::getInstance()->setIntegerForKey("current_level", tag);                    UserDefault::getInstance()->flush();                    if(tag==6||tag==11){                        Director::getInstance()->replaceScene(MagicGame::createScene());                    }else{//                        Director::getInstance()->replaceScene(MagicGame::createScene());                        Director::getInstance()->replaceScene(GameScene::createScene());                    }                }            }        }            };        auto back = Sprite::create("level/back.png");    back->setTag(BACK_TAG);    back->setPosition(Vec2(back->getContentSize().width*6.0/10.0,back->getContentSize().height*6.0/10.0));    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), back);    addChild(back);        auto shop = Sprite::create("level/shop.png");    shop->setTag(SHOP_TAG);    shop->setPosition(Vec2(shop->getContentSize().width/2.0+1,visibleSize.height-shop->getContentSize().height*6.0/10.0));    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), shop);    addChild(shop);        vector<float> positions;    positions.push_back(visibleSize.width*12/100);    positions.push_back(visibleSize.height*55/100);    positions.push_back(visibleSize.width*20/100);    positions.push_back(visibleSize.height*40/100);    positions.push_back(visibleSize.width*21/100);    positions.push_back(visibleSize.height*15/100);        positions.push_back(visibleSize.width*37/100);    positions.push_back(visibleSize.height*18/100);        positions.push_back(visibleSize.width*42/100);    positions.push_back(visibleSize.height*45/100);        positions.push_back(visibleSize.width*45/100);    positions.push_back(visibleSize.height*70/100);    positions.push_back(visibleSize.width*58/100);    positions.push_back(visibleSize.height*65/100);    positions.push_back(visibleSize.width*68/100);    positions.push_back(visibleSize.height*55/100);    positions.push_back(visibleSize.width*70/100);    positions.push_back(visibleSize.height*40/100);        positions.push_back(visibleSize.width*75/100);    positions.push_back(visibleSize.height*15/100);    positions.push_back(visibleSize.width*88/100);    positions.push_back(visibleSize.height*25/100);    positions.push_back(visibleSize.width*93/100);    positions.push_back(visibleSize.height*50/100);            for(int i = 1;i<=LEVEL_NUMBER;i++){        Sprite * level=  Sprite::create(StringUtils::format("level/l%d.png",i).c_str());        if(i<=maxLevel){            _eventDispatcher->addEventListenerWithSceneGraphPriority(listener->clone(), level);        }else{            level->setColor(Color3B(155,155, 155));        }        level->setTag(i);        level->setPosition(Vec2(positions[2*(i-1)],positions[2*(i-1)+1]));        addChild(level);    }                auto dbg = Sprite::create("level/dbg.png");    dbg->setPosition(Vec2(visibleSize.width-1-dbg->getContentSize().width/2.0,visibleSize.height-dbg->getContentSize().height/2.0-0.5));    addChild(dbg);    auto mbg = Sprite::create("level/mbg.png");    mbg->setPosition(Vec2(visibleSize.width/4.0,visibleSize.height-1-mbg->getContentSize().height/2.0));    addChild(mbg);        auto beanText = Text::create(StringUtils::format("%d",bean).c_str(), "Georgia-Bold", 32);    auto item1Text = Text::create(StringUtils::format("%d",item1).c_str(), "Georgia-Bold", 30);    auto item2Text = Text::create(StringUtils::format("%d",item2).c_str(), "Georgia-Bold", 30);    auto item3Text = Text::create(StringUtils::format("%d",item3).c_str(), "Georgia-Bold", 30);    auto item4Text = Text::create(StringUtils::format("%d",item4).c_str(), "Georgia-Bold", 30);    beanText->setPosition(Vec2(visibleSize.width*2.5/10.0,visibleSize.height*9.5/10.0));    item1Text->setPosition(Vec2(visibleSize.width*6.6/10.0,visibleSize.height*9.4/10.0));    item2Text->setPosition(Vec2(visibleSize.width*5.0/10.0,visibleSize.height*9.4/10.0));    item3Text->setPosition(Vec2(visibleSize.width*8.0/10.0,visibleSize.height*9.4/10.0));    item4Text->setPosition(Vec2(visibleSize.width*9.5/10.0,visibleSize.height*9.4/10.0));            addChild(beanText);    addChild(item1Text);    addChild(item2Text);    addChild(item3Text);    addChild(item4Text);                    return true;}